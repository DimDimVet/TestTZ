//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/InputPlayer/InputMap/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Input
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""KeyMap"",
            ""id"": ""568ffe23-1b0c-4a99-b77f-81f251671ce7"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""f182d8cb-cc41-43a5-89d1-03637540bfc7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""563c4a4b-4ce2-4a85-b706-fc7f89d7d8e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jamp"",
                    ""type"": ""Button"",
                    ""id"": ""b6e5b87f-98d4-48f3-93b6-1ad4fc800582"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mode"",
                    ""type"": ""Button"",
                    ""id"": ""6beaac2e-8c46-43e5-a2f7-f018cbe33a19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeftButton"",
                    ""type"": ""Button"",
                    ""id"": ""6d4ea16a-7d43-4b6b-85fb-264788987ddf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMiddleButton"",
                    ""type"": ""Button"",
                    ""id"": ""59d77ace-75bb-4068-b0ae-40b218775ce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRightButton"",
                    ""type"": ""Button"",
                    ""id"": ""1bcb9a40-41a7-4ea0-8315-aaeba551e8b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""97ee8106-e916-477b-b6e6-cf02ac1163b5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""93058474-6e71-4fe4-ad85-e6739f2a0d40"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f378f23c-9bd6-4c47-aac2-d75310f0f9d1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""11a36356-0c43-4bc9-9c08-df896ec8f7e3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d74df8dd-e286-4ba4-a5c0-d0e2c0fce48f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e64b910f-4943-479e-a95b-0b74d3452eb4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ea0c03c7-e444-4110-beb6-6dc5fa602236"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dbcc98da-c0b7-45e4-a52e-42d4ea47855f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""893b4545-4ede-4ec9-8bcc-71bdf25492ca"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6601c571-f10f-4d82-ab90-4d845dbdc02d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f003026d-c162-477d-91fa-d8b58c392e25"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4571859b-5f63-4d3f-9e77-3865ec81a3bc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jamp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5388052d-93d2-4c6c-9e91-71c35da12a2b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a4e5300-1ef5-490b-bddc-ac6478909e5b"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""516363a4-18c9-4579-b5d7-22f7c8eaa07c"",
                    ""path"": ""<Joystick>/{Hatswitch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dc778fa-cab8-41ef-9115-d34a71567390"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4582dd2d-2e25-4c52-985d-9589dfd9bba2"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMiddleButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e50a5853-8f67-4c97-9739-5f0388243231"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRightButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f902cca-d128-409f-a1f8-e295c9423e64"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // KeyMap
            m_KeyMap = asset.FindActionMap("KeyMap", throwIfNotFound: true);
            m_KeyMap_WASD = m_KeyMap.FindAction("WASD", throwIfNotFound: true);
            m_KeyMap_Look = m_KeyMap.FindAction("Look", throwIfNotFound: true);
            m_KeyMap_Jamp = m_KeyMap.FindAction("Jamp", throwIfNotFound: true);
            m_KeyMap_Mode = m_KeyMap.FindAction("Mode", throwIfNotFound: true);
            m_KeyMap_MouseLeftButton = m_KeyMap.FindAction("MouseLeftButton", throwIfNotFound: true);
            m_KeyMap_MouseMiddleButton = m_KeyMap.FindAction("MouseMiddleButton", throwIfNotFound: true);
            m_KeyMap_MouseRightButton = m_KeyMap.FindAction("MouseRightButton", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // KeyMap
        private readonly InputActionMap m_KeyMap;
        private List<IKeyMapActions> m_KeyMapActionsCallbackInterfaces = new List<IKeyMapActions>();
        private readonly InputAction m_KeyMap_WASD;
        private readonly InputAction m_KeyMap_Look;
        private readonly InputAction m_KeyMap_Jamp;
        private readonly InputAction m_KeyMap_Mode;
        private readonly InputAction m_KeyMap_MouseLeftButton;
        private readonly InputAction m_KeyMap_MouseMiddleButton;
        private readonly InputAction m_KeyMap_MouseRightButton;
        public struct KeyMapActions
        {
            private @InputActions m_Wrapper;
            public KeyMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @WASD => m_Wrapper.m_KeyMap_WASD;
            public InputAction @Look => m_Wrapper.m_KeyMap_Look;
            public InputAction @Jamp => m_Wrapper.m_KeyMap_Jamp;
            public InputAction @Mode => m_Wrapper.m_KeyMap_Mode;
            public InputAction @MouseLeftButton => m_Wrapper.m_KeyMap_MouseLeftButton;
            public InputAction @MouseMiddleButton => m_Wrapper.m_KeyMap_MouseMiddleButton;
            public InputAction @MouseRightButton => m_Wrapper.m_KeyMap_MouseRightButton;
            public InputActionMap Get() { return m_Wrapper.m_KeyMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyMapActions set) { return set.Get(); }
            public void AddCallbacks(IKeyMapActions instance)
            {
                if (instance == null || m_Wrapper.m_KeyMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_KeyMapActionsCallbackInterfaces.Add(instance);
                @WASD.started += instance.OnWASD;
                @WASD.performed += instance.OnWASD;
                @WASD.canceled += instance.OnWASD;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Jamp.started += instance.OnJamp;
                @Jamp.performed += instance.OnJamp;
                @Jamp.canceled += instance.OnJamp;
                @Mode.started += instance.OnMode;
                @Mode.performed += instance.OnMode;
                @Mode.canceled += instance.OnMode;
                @MouseLeftButton.started += instance.OnMouseLeftButton;
                @MouseLeftButton.performed += instance.OnMouseLeftButton;
                @MouseLeftButton.canceled += instance.OnMouseLeftButton;
                @MouseMiddleButton.started += instance.OnMouseMiddleButton;
                @MouseMiddleButton.performed += instance.OnMouseMiddleButton;
                @MouseMiddleButton.canceled += instance.OnMouseMiddleButton;
                @MouseRightButton.started += instance.OnMouseRightButton;
                @MouseRightButton.performed += instance.OnMouseRightButton;
                @MouseRightButton.canceled += instance.OnMouseRightButton;
            }

            private void UnregisterCallbacks(IKeyMapActions instance)
            {
                @WASD.started -= instance.OnWASD;
                @WASD.performed -= instance.OnWASD;
                @WASD.canceled -= instance.OnWASD;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @Jamp.started -= instance.OnJamp;
                @Jamp.performed -= instance.OnJamp;
                @Jamp.canceled -= instance.OnJamp;
                @Mode.started -= instance.OnMode;
                @Mode.performed -= instance.OnMode;
                @Mode.canceled -= instance.OnMode;
                @MouseLeftButton.started -= instance.OnMouseLeftButton;
                @MouseLeftButton.performed -= instance.OnMouseLeftButton;
                @MouseLeftButton.canceled -= instance.OnMouseLeftButton;
                @MouseMiddleButton.started -= instance.OnMouseMiddleButton;
                @MouseMiddleButton.performed -= instance.OnMouseMiddleButton;
                @MouseMiddleButton.canceled -= instance.OnMouseMiddleButton;
                @MouseRightButton.started -= instance.OnMouseRightButton;
                @MouseRightButton.performed -= instance.OnMouseRightButton;
                @MouseRightButton.canceled -= instance.OnMouseRightButton;
            }

            public void RemoveCallbacks(IKeyMapActions instance)
            {
                if (m_Wrapper.m_KeyMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IKeyMapActions instance)
            {
                foreach (var item in m_Wrapper.m_KeyMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_KeyMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public KeyMapActions @KeyMap => new KeyMapActions(this);
        public interface IKeyMapActions
        {
            void OnWASD(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnJamp(InputAction.CallbackContext context);
            void OnMode(InputAction.CallbackContext context);
            void OnMouseLeftButton(InputAction.CallbackContext context);
            void OnMouseMiddleButton(InputAction.CallbackContext context);
            void OnMouseRightButton(InputAction.CallbackContext context);
        }
    }
}
